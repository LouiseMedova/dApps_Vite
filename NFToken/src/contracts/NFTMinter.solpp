pragma soliditypp ^0.4.3;
import "./NFToken.solpp";

contract NFTMinter is NFToken {

     constructor(string memory tokenName, string memory symbol, string memory baseURI) NFToken(tokenName, symbol) public {
         _baseURI = baseURI;
     }

     uint tokenBalance;
     uint nextTokenId;
   

     onMessage createToken(bytes32 _metadataURI) {
            _mint(msg.sender, nextTokenId);
            _setTokenURI(nextTokenId, _metadataURI); 
            nextTokenId++;
     }


    getter getBalance(address _owner) returns(uint){
        return _getOwnerNFTCount(_owner);
    }

    getter getOwnerOf(uint256 _tokenId) returns(address){
        return _getOwnerOfNFT(_tokenId);
    }
     
     getter getTokenURI(uint256 _tokenId) returns(bytes32){
        return _getTokenURI(_tokenId);
    }

    getter getTokensOf(address _owner) returns(uint256[] memory) {
        uint256[] memory tokenIds = new uint256[](_balances[_owner]) ;
        uint256 j = 0;
        for(uint256 i = 0; i < nextTokenId; i++) {
            if(_owners[i] == _owner) {
                tokenIds[j] = i;
                j++;
            }
        }
        return tokenIds;
    }

    getter getTotalNumberOfTokens() returns(uint256) {
        return nextTokenId;
    }
 }

 